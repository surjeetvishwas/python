# -*- coding: utf-8 -*-
"""data processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jJiT6CTaz0UXSY3CFqIuUUbCrJpIiz3N
"""

import yfinance as yf
import pandas as pd

def extraer_datos(tickers, fecha_inicio):
    """
    Descarga los precios de cierre ajustados desde Yahoo Finance.
    Handles different structures returned by yf.download.
    """
    # Use auto_adjust=True (default) which typically returns adjusted prices directly
    # group_by='ticker' can be helpful for multi-ticker structure consistency
    data = yf.download(tickers, start=fecha_inicio, auto_adjust=True, group_by='ticker')

    # If downloading multiple tickers, yfinance might create multi-level columns (Ticker, OHLC).
    # We usually just want the 'Close' price after auto_adjust.
    if isinstance(tickers, list) and len(tickers) > 1:
        # If columns are multi-level (e.g., ('AAPL', 'Close'), ('MSFT', 'Close'))
        if isinstance(data.columns, pd.MultiIndex):
             # Select only the 'Close' column for each ticker
             data = data.loc[:, pd.IndexSlice[:, 'Close']]
             # Rename columns to just the ticker name
             data.columns = data.columns.levels[0] if data.columns.nlevels > 1 else data.columns
        # If columns are already single-level (less common for multiple tickers with group_by)
        # no action needed, assuming they are the adjusted close prices.

    elif isinstance(tickers, list) and len(tickers) == 1:
         # If single ticker in a list, result might be DataFrame with 'Close' column
         if 'Close' in data.columns:
              data = data[['Close']] # Keep it as a DataFrame
              data.columns = tickers # Rename column to ticker name
         # Or it might already be the correct series/DataFrame (less likely with group_by)

    # If downloading a single ticker (as string), it often returns a DataFrame with OHLC columns.
    elif isinstance(tickers, str):
        if 'Close' in data.columns:
            data = data[['Close']] # Select the 'Close' column, keep as DataFrame
            data.columns = [tickers] # Rename the column

    # Handle potential case where data is empty after download attempt
    if data.empty:
        print(f"Warning: No data returned from yfinance for tickers: {tickers}")

    return data

def procesar_datos(data):
    """Elimina filas con valores nulos y formatea los datos."""
    # Drop rows where *any* ticker has a NaN value to ensure alignment
    data = data.dropna()
    return data