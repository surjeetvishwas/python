# -*- coding: utf-8 -*-
"""Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PqplEPYcnIcCKatPudU6pIIRjY6xZc_x
"""

# !pip install fpdf

import sys
import subprocess
import random
import matplotlib.pyplot as plt
import pandas as pd
from report_generator import generar_reporte_pdf
from visualization import plot_portfolio_growth

def solicitar_portafolios_y_montos():
    """Permite al usuario ingresar manualmente los portafolios y los montos de inversión."""
    portafolios = []
    montos = []
    print("Introduce los portafolios manualmente. Escribe 'fin' para terminar.")

    while True:
        tickers = input("Introduce los tickers separados por comas (o 'fin' para terminar): ").strip()
        if tickers.lower() == "fin":
            break
        portafolios.append(tickers.split(","))

        try:
            monto = input("Introduce el monto de inversión o presiona Enter para asignar uno aleatorio: ").strip()
            monto = float(monto) if monto else random.uniform(1000, 35000)
        except ValueError:
            print("Monto inválido. Se asignará un valor aleatorio.")
            monto = random.uniform(1000, 35000)
        montos.append(monto)

    if not portafolios:
        print("No se ingresaron portafolios. Saliendo del programa.")
        sys.exit()

    return portafolios, montos

def obtener_datos_de_prueba(prueba_numero):
    """Determina el índice de referencia y el objetivo de optimización de manera dinámica."""
    # Ajusta la lógica según tus necesidades para obtener los datos correctos
    indices = ["S&P 500", "Dow Jones", "NASDAQ"]  # Ejemplo de índices
    objetivos = ["Índice Sharpe", "Máxima Rentabilidad", "Minimización de Riesgo"]  # Ejemplo de objetivos

    indice = indices[prueba_numero % len(indices)]  # Lógica para elegir un índice
    objetivo = objetivos[prueba_numero % len(objetivos)]  # Lógica para elegir el objetivo

    return indice, objetivo

def ejecutar_prueba(portafolio, monto, prueba_numero):
    """Ejecuta el script main_v1.py como un proceso externo sin detenerse ante errores y genera reportes."""
    try:
        # Obtener el índice de referencia y el objetivo dinámicamente
        indice, objetivo = obtener_datos_de_prueba(prueba_numero)

        print(f"\n--- Ejecutando prueba {prueba_numero} ---")
        print(f"Portafolio: {portafolio}")
        print(f"Monto de inversión: {monto:.2f} MXN")
        print(f"Índice de referencia: {indice}")
        print(f"Moneda de inversión: MXN")
        print(f"Objetivo de optimización: {objetivo}")

        # Ejecutar el proceso externo (main_v1.py)
        subprocess.run(["python", "main_v1.py", ','.join(portafolio), str(monto)], check=False)
        print("✅ Prueba ejecutada (incluso si hubo errores). Generando reporte...")

        # Obtener los datos reales de la prueba, por ejemplo, los pesos y activos del portafolio
        # Este sería el reemplazo de los datos simulados
        df_weights = pd.DataFrame({
            'Activo': portafolio,  # Usamos los tickers del portafolio ingresado
            'Peso': [random.uniform(0.1, 0.5) for _ in portafolio],  # Pesos aleatorios (ajustar según tu lógica)
            'Inversión': [monto * random.uniform(0.1, 0.5) for _ in portafolio]  # Inversión aleatoria (ajustar según tu lógica)
        })

        # Verificación de que las columnas necesarias están presentes
        if 'Activo' not in df_weights or 'Peso' not in df_weights or 'Inversión' not in df_weights:
            print("⚠️ El DataFrame no contiene las columnas necesarias para generar el reporte.")
            return

        # Generación del reporte (se le asigna un nombre único para cada prueba)
        reporte_filename = f"reporte_portafolio_{prueba_numero}.pdf"
        generar_reporte_pdf(indice, "MXN", monto, df_weights, 0.05, objetivo, filename=reporte_filename)

        # Visualización del crecimiento del portafolio (simulación)
        plot_portfolio_growth(pd.Series([10000, 10200, 10450, 10700]))

    except Exception as e:
        print(f"⚠️ Error durante la ejecución de la prueba: {e}")

if __name__ == "__main__":
    portafolios, montos = solicitar_portafolios_y_montos()

    try:
        num_pruebas = int(input("¿Cuántas pruebas deseas ejecutar? (máximo 30): "))
        num_pruebas = min(num_pruebas, 30)
    except ValueError:
        print("Número de pruebas inválido. Saliendo del programa.")
        sys.exit()

    for i in range(num_pruebas):
        print(f"\n--- Ejecutando Prueba {i+1}/{num_pruebas} ---")
        ejecutar_prueba(portafolios[i % len(portafolios)], montos[i % len(montos)], i+1)

    print("✅ Todas las pruebas completadas.")