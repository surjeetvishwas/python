# -*- coding: utf-8 -*-
"""MAIN V1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16IbEzEhLRYwdecg0m92kdlTVvAivOl3m
"""

# !pip install fpdf

from user_params import obtener_parametros_usuario
from market_data import MarketData
from data_processing import extraer_datos, procesar_datos
from portfolio_optimizer import PortfolioOptimizer
from visualization import plot_portfolio_growth
from report_generator import generar_reporte_pdf
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime

def main():
    tickers = input("Introduce los tickers separados por comas: ").split(",")
    indice, moneda_indice, horizonte, objetivo = obtener_parametros_usuario()
    moneda_usuario = input("Introduce la moneda en la que deseas invertir (ejemplo: USD, EUR, MXN): ")
    monto_inversion = float(input("Introduce el monto de inversión en la moneda seleccionada: "))
    fecha_inicio = "2014-01-01"  # 10 años atrás

    # Obtener tasa libre de riesgo
    market_data = MarketData()
    risk_free_rate = market_data.get_risk_free_rate()
    print(f"Tasa libre de riesgo obtenida: {risk_free_rate}")

    # Descargar y procesar datos
    data = extraer_datos(tickers, fecha_inicio)
    data = procesar_datos(data)

    # Optimizar portafolio
    optimizer = PortfolioOptimizer(data)
    weights = optimizer.calculate_optimal_weights()
    print("Pesos óptimos:", weights)

    # Crear DataFrame con pesos asignados y calcular inversión por activo
    df_weights = pd.DataFrame(list(weights.items()), columns=["Activo", "Peso"])
    df_weights["Inversión"] = df_weights["Peso"] * monto_inversion
    print("\nDistribución del Portafolio:")
    print(df_weights.to_string(index=False))

    # Generar reporte en PDF
    generar_reporte_pdf(indice, moneda_usuario, monto_inversion, df_weights, risk_free_rate, objetivo)

    # Simular crecimiento del portafolio
    growth = optimizer.simulate_portfolio(weights)

    # Graficar resultados mejorados
    plot_portfolio_growth(growth)

if __name__ == "__main__":
    main()